# transform-markdown-mathmode

Transform LaTeX equations asynchronously in a stream of markdown

## Introduction

This module takes a stream of [markdown](http://daringfireball.net/projects/markdown/syntax) and searches for basic patterns that look like equations, being careful to exclude escaped patterns or code blocks. It doesn't itself do any rendering, but takes transformation functions that may perform some asynchronous action and return the result. This makes it possible to render equations, store them somewhere, and insert image tags into the resulting markdown.

## What it does

As hesitant as I was to parse a stream of markdown, this module uses a [finite state machine](https://en.wikipedia.org/wiki/Finite-state_machine) to track whether a couple different types of blocks are open or closed. I'm suspicious it might just be possible to do this with a couple regexes, but the current complication comes from the need to track open equations across multiple lines of streamed text. That's really all it's doing through. It's pretty simple, carefully tested, and allows simple escaping for corner cases.

The primary goal is to transform equations asynchronously while avoiding a bunch of ugly escaping and other workarounds.

## Example

`README.md` is generated by passing `README.mdtex` through the parser with default configuration:

```
$ cat README.mdtex | node example/transform.js > README.md
```

The transformation isn't particularly interesting, but it means inline equations like `$y = x$` get transformed to \`$y = x$\` and display equations like `$$y = x$$` get transformed into \`$$y = x$$\`.
'use strict'

var transformMarkdown = require('../lib')
  , fs = require('fs')

process.stdin
  .pipe( transformMarkdown() )
  .pipe( process.stdout )




